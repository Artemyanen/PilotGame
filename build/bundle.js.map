{"version":3,"sources":["index.ts","Core/Game.ts","Core/Canvas.ts","Objects/ObjectManager.ts","Objects/Block.ts"],"names":[],"mappings":"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","file":"","sourcesContent":["// import * as _ from 'underscore';\r\n\r\n// interface IObject {\r\n//     x: number,\r\n//     y: number,\r\n//     color: string\r\n// }\r\n\r\n// class Block implements IObject {\r\n//     x: number;\r\n//     y: number;\r\n//     color: string;\r\n//     height: number = 64;\r\n//     width: number = 64;\r\n//     remove: boolean;\r\n\r\n//     constructor(x, y, color) {\r\n//         this.color = color;\r\n//         this.x = x;\r\n//         this.y = y;\r\n//         this.remove = false;\r\n//     }\r\n//     get shouldHaveBorder(): boolean {\r\n//         const downNeighbour = getObjectsIn(this.x, this.y + 64)[0];\r\n//         return (downNeighbour && this.color != downNeighbour.color || this.y == canvas.height - this.height);\r\n//     }\r\n\r\n//     getNeightbours() {\r\n//         const x = this.x;\r\n//         const y = this.y;\r\n//         return [\r\n//             getObjectsIn(x, y - 64)[0],\r\n//             getObjectsIn(x, y + 64)[0],\r\n//             getObjectsIn(x - 64, y)[0],\r\n//             getObjectsIn(x + 64, y)[0]].filter(q => q);\r\n//     }\r\n//     isDownPlaceEmpty() {\r\n//         return (getObjectsIn(this.x, this.y + 64)[0] == undefined && this.y < canvas.height - this.height)\r\n//     }\r\n\r\n//     update() {\r\n//         if (this.isDownPlaceEmpty())\r\n//             this.y += 8;\r\n//     }\r\n\r\n// }\r\n\r\n// const canvas = document.getElementById('MyCanvas');\r\n// const context = canvas.getContext('2d');\r\n\r\n// let dt: number;\r\n// let lastTime: number = 0;\r\n// let gameObjects: Block[] = [];\r\n// let isMoving = false;\r\n\r\n// const pulse = (millis): void => {\r\n//     if (lastTime != null && lastTime) {\r\n//         dt = ((millis - lastTime) / 1000);\r\n//         update();\r\n//     }\r\n//     lastTime = millis;\r\n//     window.requestAnimationFrame(pulse);\r\n// }\r\n\r\n// const update = () => {\r\n\r\n//     gameObjects = gameObjects.filter(q => q.remove == false);\r\n//     isMoving = gameObjects.filter(object => object.isDownPlaceEmpty()).length > 0;\r\n//     gameObjects.forEach(object => object.update());\r\n\r\n//     // gameObjects.some(q=>q.y ==0)\r\n//     context.clearRect(0, 0,canvas.width, canvas.height);\r\n//     context.fillStyle = '#806895';\r\n//     context.fillRect(0, 0, 384, 540);\r\n//     context.fillStyle = '#60427a';\r\n//     context.fillRect(64, 0, 384 - 128, 540);\r\n\r\n//     gameObjects.forEach((object, ind) => {\r\n//         context.fillStyle = object.color;\r\n//         context.fillRect(object.x, object.y, object.height, object.width);\r\n//     });\r\n// }\r\n\r\n// const getRandomColor = (): string => {\r\n//     const colors = ['#ff9e9d', '#f4eea6', '#3fb8af', '#ff3d7f'];\r\n//     let random = Math.floor(Math.random() * colors.length);\r\n//     return colors[random];\r\n// }\r\n\r\n// const createNewLine = () => {\r\n//     const size = 64;\r\n//     let y = canvas.height;\r\n//     while (true) {\r\n//         let lineObjects = new Array(4).fill(0).map((val, ind) => new Block(size * (ind + 1), y, getRandomColor()));\r\n//         let result = _.chain(lineObjects).groupBy(q => q.color).map(q => q.length).filter(q => q > 2).value().length == 0;\r\n\r\n//         if (result == false)\r\n//             continue;\r\n\r\n//         gameObjects = gameObjects.concat(lineObjects);\r\n//         break;\r\n//     }\r\n// }\r\n\r\n// const upOldLines = () => {\r\n//     gameObjects.forEach((block) => {\r\n//         block.y -= 64;\r\n//     });\r\n// }\r\n\r\n// const bfs = (startBlock: Block) => {\r\n//     let checked: Block[] = [];\r\n//     let queue: Block[] = [];\r\n//     let current: Block;\r\n//     queue.push(startBlock);\r\n//     checked.push(startBlock);\r\n//     while (queue.length) {\r\n//         current = queue.shift();\r\n//         current\r\n//             .getNeightbours()\r\n//             .filter(neigh => neigh.color == current.color)\r\n//             .forEach(neigh => {\r\n//                 if (checked.indexOf(neigh) == -1) {\r\n//                     queue.push(neigh);\r\n//                     checked.push(neigh);\r\n//                 }\r\n//             });\r\n//     }\r\n//     return checked;\r\n// };\r\n\r\n// const isTripleAvailable = (objects: Block[]): Block[][] => {\r\n//     return _.chain(objects)\r\n//         .filter(val => val.remove == false)\r\n//         .map(val => bfs(val))\r\n//         .filter(q => q.length > 2 && (rowCountMatch(q[0], 3, Direction.Horizontal) || rowCountMatch(q[0], 3, Direction.Vertical)))\r\n//         .map(val => _.chain(val).sortBy(q => q.x).sortBy(q => q.y).value())\r\n//         .groupBy(q => q[0].x + \"|\" + q[0].y).map(q => q[0])\r\n//         .value();\r\n// }\r\n\r\n// const sortObjects = (a: Block, b: Block): number => {\r\n//     return a.x == b.x && a.y == b.y && a.color == b.color ? 1 : 0;\r\n// }\r\n\r\n// const rowCountMatch = (block: Block, blocksInRowCount: number, direction: Direction): boolean => {\r\n//     return new Array(blocksInRowCount)\r\n//         .fill('x')\r\n//         .filter((_, ind) => {\r\n//             let x = direction == Direction.Horizontal ? block.x + (ind * block.width) : block.x;\r\n//             let y = direction == Direction.Vertical ? block.y + (ind * block.height) : block.y;\r\n//             let obj = getObjectsIn(x, y)[0];\r\n//             return (obj && obj.color == block.color);\r\n//         }).length == blocksInRowCount;\r\n// }\r\n\r\n// enum Direction {\r\n//     Vertical,\r\n//     Horizontal\r\n// }\r\n\r\n// const getObjectsIn = (x: number, y: number) => {\r\n//     return gameObjects.filter((object) => (y >= object.y && y < object.y + object.height\r\n//         && x >= object.x && x < object.x + object.width));\r\n// }\r\n\r\n// const timeout = async (wait: number): Promise<void> => new Promise<void>((res) => setTimeout(res, wait));\r\n\r\n// const waitForFalling = async (): Promise<boolean> => {\r\n//     while (true) {\r\n//         await timeout(100);\r\n//         if (isMoving == false)\r\n//             return true;\r\n//     }\r\n// }\r\n\r\n// let canvasLeftOffset = canvas.offsetLeft;\r\n// let canvasToptOffset = canvas.offsetTop;\r\n// document.addEventListener('click', async (event) => {\r\n//     const x = event.pageX - canvasLeftOffset;\r\n//     const y = event.pageY - canvasToptOffset;\r\n\r\n//     const clickedObject = getObjectsIn(x, y)[0];\r\n//     if (!clickedObject || isMoving)\r\n//         return;\r\n//     const sameColors = bfs(clickedObject);\r\n//     sameColors.forEach((val, ind) => val.remove = true);\r\n//     createNewLine();\r\n//     upOldLines();\r\n//     while (true) {\r\n//         await waitForFalling();\r\n//         const triples = isTripleAvailable(gameObjects);\r\n//         if (triples.length == 0)\r\n//             break;\r\n//         triples.forEach(val => val.forEach(q => q.remove = true));\r\n//     }\r\n//     if (gameObjects.length == 0)\r\n//         createNewLine();\r\n// });\r\n\r\n\r\n// new Array(2).fill(0).forEach(() => {\r\n//     createNewLine();\r\n//     upOldLines();\r\n// })\r\n\r\n// pulse(null);\r\n\r\nimport Game from './Core/Game';\r\n\r\nlet game = new Game();\r\ngame.start();\r\n\r\n\r\n","import Block from '../Objects/Block';\r\nimport Canvas from './Canvas';\r\nimport ObjectManager from '../Objects/ObjectManager';\r\n\r\nclass Game {\r\n    public static dt: number;\r\n    private _myCanvas: Canvas;\r\n    private _manager: ObjectManager;\r\n    private _lastTime: number = 0;\r\n    private _canvasLeftOffset: number;\r\n    private _canvasToptOffset: number;\r\n\r\n    constructor() {\r\n        this._myCanvas = Canvas.Instance;\r\n        this._manager = ObjectManager.Instance;\r\n        this._canvasLeftOffset = this._myCanvas.Canvas.offsetLeft;\r\n        this._canvasToptOffset = this._myCanvas.Canvas.offsetTop;\r\n\r\n        this._manager.createStartLines();\r\n        this.initEventListener();\r\n    }\r\n\r\n    private initEventListener() {\r\n        document.addEventListener('click', async (event) => {\r\n            const x = event.pageX - this._canvasLeftOffset;\r\n            const y = event.pageY - this._canvasToptOffset;\r\n\r\n            const clickedObject = this._manager.getObjectsIn(x, y)[0];\r\n            if (!clickedObject || this._manager._isMoving)\r\n                return;\r\n            const sameColors = this._manager.bfs(clickedObject);\r\n            sameColors.forEach((val, ind) => val.remove = true);\r\n            this._manager.createNewLine();\r\n            this._manager.upOldLines();\r\n            while (true) {\r\n                await this._manager.waitForFalling();\r\n                const triples = this._manager.isTripleAvailable();\r\n                if (triples.length == 0)\r\n                    break;\r\n                triples.forEach(val => val.forEach(q => q.remove = true));\r\n            }\r\n            if (this._manager.GameObjects.length == 0)\r\n                this._manager.createNewLine();\r\n        });\r\n    }\r\n\r\n    private pulse = (millis): void => {\r\n        if (this._lastTime != null && this._lastTime) {\r\n            Game.dt = ((millis - this._lastTime) / 1000);\r\n            this.update();\r\n        }\r\n        this._lastTime = millis;\r\n        window.requestAnimationFrame(this.pulse);\r\n    }\r\n\r\n    private update(): void {\r\n        this._manager.GameObjects = this._manager.GameObjects.filter(q => q.remove == false);\r\n        this._manager._isMoving = this._manager.GameObjects.filter(object => object.isDownPlaceEmpty()).length > 0;\r\n        this._manager.GameObjects.forEach(object => object.update());\r\n\r\n        // gameObjects.some(q=>q.y ==0)\r\n        this._myCanvas.clearWindow();\r\n        this._myCanvas.drawBackground();\r\n        this._myCanvas.drawSideColumn();\r\n\r\n        this._manager.GameObjects.forEach((object) => {\r\n            this._myCanvas.drawBlock({ object });\r\n            \r\n        });\r\n    }\r\n \r\n    public start(): void {\r\n        this.pulse(null);\r\n    }\r\n}\r\n\r\nexport default Game;","class Canvas {\r\n    private static _instance: Canvas;\r\n    private _canvas: HTMLCanvasElement;\r\n    private _context: CanvasRenderingContext2D;\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    static get Instance(): Canvas {\r\n        if (Canvas._instance == null)\r\n            Canvas._instance = new Canvas(490, 640);\r\n        return Canvas._instance;\r\n    }\r\n\r\n    private constructor(width: number, height: number) {\r\n        this.initCanvas(width, height);\r\n    }\r\n\r\n    private initCanvas(width: number, height: number) {\r\n        this._height = height;\r\n        this._width = width;\r\n        document.body.innerHTML = `<canvas id='canvas' width='${this._width}' height='${this._height}' />`;\r\n        this._canvas = (<HTMLCanvasElement>document.getElementById(\"canvas\"));\r\n        this._context = this._canvas.getContext(\"2d\");\r\n    }\r\n\r\n    public get Width(): number { return this._width }\r\n    public get Height(): number { return this._height }\r\n    public get Canvas(): HTMLCanvasElement { return this._canvas }\r\n    public get Context(): CanvasRenderingContext2D { return this._context }\r\n\r\n\r\n    public drawBackground(): void {\r\n        this._context.fillStyle = '#806895';\r\n        this._context.fillRect(0, 0, this._width, this._height);\r\n    }\r\n\r\n    public drawSideColumn(): void {\r\n        this._context.fillStyle = '#60427a';\r\n        this._context.fillRect((this._width/7)*1.5, 0, this._width - (this._width/7)*3, this._height);\r\n    }\r\n\r\n    public drawBlock({ object }): void {\r\n        this._context.fillStyle = object.color;\r\n        this._context.fillRect(object.x, object.y, object.height, object.width);\r\n    }\r\n\r\n    public clearWindow(): void {\r\n        this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n    }\r\n}\r\n\r\nexport default Canvas;","import * as _ from 'underscore';\r\nimport Block from './Block';\r\nimport Canvas from '../Core/Canvas';\r\nimport Game from '../Core/Game';\r\n\r\nclass ObjectManager {\r\n    private _gameObjects: Block[] = [];\r\n    private static _instance: ObjectManager;\r\n    private _myCanvas: Canvas;\r\n    public _isMoving = false;\r\n\r\n    static get Instance(): ObjectManager {\r\n        if (ObjectManager._instance == null)\r\n            ObjectManager._instance = new ObjectManager();\r\n        return ObjectManager._instance;\r\n    }\r\n\r\n    private constructor() {\r\n        this._myCanvas = Canvas.Instance;\r\n    }\r\n\r\n    public get GameObjects(): Block[] { return this._gameObjects }\r\n    public set GameObjects(gameObjects) { this._gameObjects = gameObjects }\r\n\r\n    private getRandomColor = (): string => {\r\n        const colors = ['#ff9e9d', '#f4eea6', '#3fb8af', '#ff3d7f'];\r\n        let random = Math.floor(Math.random() * colors.length);\r\n        return colors[random];\r\n    }\r\n\r\n    private sortObjects(a: Block, b: Block): number {\r\n        return a.x == b.x && a.y == b.y && a.color == b.color ? 1 : 0;\r\n    }\r\n\r\n    private rowCountMatch(block: Block, blocksInRowCount: number, direction: Direction): boolean {\r\n        return new Array(blocksInRowCount)\r\n            .fill('x')\r\n            .filter((_, ind) => {\r\n                let x = direction == Direction.Horizontal ? block.x + (ind * block.width) : block.x;\r\n                let y = direction == Direction.Vertical ? block.y + (ind * block.height) : block.y;\r\n                let obj = this.getObjectsIn(x, y)[0];\r\n                return (obj && obj.color == block.color);\r\n            }).length == blocksInRowCount;\r\n    }\r\n\r\n    private timeout = async (wait: number): Promise<void> => new Promise<void>((res) => setTimeout(res, wait));\r\n\r\n    public createStartLines(): void {\r\n        new Array(2).fill(0).forEach(() => {\r\n            this.createNewLine();\r\n            this.upOldLines();\r\n        })\r\n    }\r\n\r\n    public createNewLine(): void {\r\n        const size = Canvas.Instance.Width/7;\r\n        let y = this._myCanvas.Height;\r\n        while (true) {\r\n            let lineObjects = new Array(4).fill(0).map((val, ind) => new Block(size * (ind + 1.5), y, this.getRandomColor()));\r\n            let result = _.chain(lineObjects).groupBy(q => q.color).map(q => q.length).filter(q => q > 2).value().length == 0;\r\n\r\n            if (result == false)\r\n                continue;\r\n\r\n            this._gameObjects = this._gameObjects.concat(lineObjects);\r\n            break;\r\n        }\r\n    }\r\n\r\n    public upOldLines(): void {\r\n        this._gameObjects.forEach((block) => {\r\n            block.y -= Canvas.Instance.Width/7;\r\n        });\r\n    }\r\n\r\n    public bfs(startBlock: Block): Block[] {\r\n        let checked: Block[] = [];\r\n        let queue: Block[] = [];\r\n        let current: Block;\r\n        queue.push(startBlock);\r\n        checked.push(startBlock);\r\n        while (queue.length) {\r\n            current = queue.shift();\r\n            current\r\n                .getNeightbours()\r\n                .filter(neigh => neigh.color == current.color)\r\n                .forEach(neigh => {\r\n                    if (checked.indexOf(neigh) == -1) {\r\n                        queue.push(neigh);\r\n                        checked.push(neigh);\r\n                    }\r\n                });\r\n        }\r\n        return checked;\r\n    };\r\n\r\n    public isTripleAvailable(): Block[][] {\r\n        return _.chain(this._gameObjects)\r\n            .filter(val => val.remove == false)\r\n            .map(val => this.bfs(val))\r\n            .filter(q => q.length > 2 && (this.rowCountMatch(q[0], 3, Direction.Horizontal) || this.rowCountMatch(q[0], 3, Direction.Vertical)))\r\n            .map(val => _.chain(val).sortBy(q => q.x).sortBy(q => q.y).value())\r\n            .groupBy(q => q[0].x + \"|\" + q[0].y).map(q => q[0])\r\n            .value();\r\n    }\r\n\r\n    public getObjectsIn(x: number, y: number): Block[] {\r\n        return this._gameObjects.filter((object) => (y >= object.y && y < object.y + object.height\r\n            && x >= object.x && x < object.x + object.width));\r\n    }\r\n\r\n    public waitForFalling = async (): Promise<boolean> => {\r\n        while (true) {\r\n            await this.timeout(100);\r\n            if (this._isMoving == false)\r\n                return true;\r\n        }\r\n    }\r\n}\r\n\r\nenum Direction {\r\n    Vertical,\r\n    Horizontal\r\n}\r\n\r\nexport default ObjectManager;","import Canvas from '../Core/Canvas';\r\nimport ObjectManager from './ObjectManager';\r\n\r\nclass Block implements IObject {\r\n    public x: number;\r\n    public y: number;\r\n    public color: string;\r\n    public height: number = Canvas.Instance.Width/7;\r\n    public width: number = Canvas.Instance.Width/7;\r\n    public remove: boolean;\r\n    private _manager: ObjectManager = ObjectManager.Instance;\r\n    private _canvas: Canvas = Canvas.Instance;\r\n\r\n    constructor(x, y, color) {\r\n        this.color = color;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.remove = false;\r\n    }\r\n    public get ShouldHaveBorder(): boolean {\r\n        const downNeighbour = this._manager.getObjectsIn(this.x, this.y + this.height)[0];\r\n        return (downNeighbour && this.color != downNeighbour.color ||\r\n            this.y == this._canvas.Height - this.height);\r\n    }\r\n\r\n    public getNeightbours(): Block[] {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const size = this.height;\r\n        return [\r\n            this._manager.getObjectsIn(x, y - size)[0],\r\n            this._manager.getObjectsIn(x, y + size)[0],\r\n            this._manager.getObjectsIn(x - size, y)[0],\r\n            this._manager.getObjectsIn(x + size, y)[0]].filter(q => q);\r\n    }\r\n\r\n    public isDownPlaceEmpty(): boolean {\r\n        return (this._manager.getObjectsIn(this.x, this.y + this.height)[0] == undefined &&\r\n            this.y < this._canvas.Height - this.height)\r\n    }\r\n\r\n    public update(): void {\r\n        if (this.isDownPlaceEmpty())\r\n            this.y += this.height/8;\r\n    }\r\n}\r\n\r\ninterface IObject {\r\n    x: number,\r\n    y: number,\r\n    color: string\r\n}\r\n\r\nexport default Block;"]}